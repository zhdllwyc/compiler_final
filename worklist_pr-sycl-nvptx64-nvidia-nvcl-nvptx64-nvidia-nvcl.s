//
// Generated by LLVM NVPTX Back-End
//

.version 3.2
.target sm_20, texmode_independent
.address_size 64

	// .globl	SYCL_class_atomic_test_iter // -- Begin function SYCL_class_atomic_test_iter
                                        // @SYCL_class_atomic_test_iter
.entry SYCL_class_atomic_test_iter(
	.param .u64 .ptr .global .align 4 SYCL_class_atomic_test_iter_param_0,
	.param .u64 .ptr .global .align 4 SYCL_class_atomic_test_iter_param_1
)
{
	.reg .b32 	%r<10>;
	.reg .b64 	%rd<6>;

// %bb.0:
	ld.param.u64 	%rd1, [SYCL_class_atomic_test_iter_param_0];
	ld.param.u64 	%rd2, [SYCL_class_atomic_test_iter_param_1];
	mov.u32 	%r1, %ctaid.x;
	mov.u32 	%r2, %ntid.x;
	mov.u32 	%r3, %tid.x;
	mad.lo.s32 	%r4, %r2, %r1, %r3;
	and.b32  	%r5, %r4, 1;
	mul.wide.u32 	%rd3, %r5, 4;
	add.s64 	%rd4, %rd1, %rd3;
	atom.global.add.u32 	%r6, [%rd4], 1;
	atom.global.and.b32 	%r7, [%rd1], 0;
	add.s64 	%rd5, %rd2, %rd3;
	ld.global.u32 	%r8, [%rd5];
	add.s32 	%r9, %r8, 1;
	st.global.u32 	[%rd5], %r9;
	ret;
                                        // -- End function
}
	// .globl	SYCL_class_worklist_pr_iter // -- Begin function SYCL_class_worklist_pr_iter
.entry SYCL_class_worklist_pr_iter(
	.param .u64 .ptr .shared .align 4 SYCL_class_worklist_pr_iter_param_0,
	.param .u64 .ptr .shared .align 4 SYCL_class_worklist_pr_iter_param_1,
	.param .u64 SYCL_class_worklist_pr_iter_param_2,
	.param .u32 SYCL_class_worklist_pr_iter_param_3,
	.param .u64 .ptr .global .align 4 SYCL_class_worklist_pr_iter_param_4,
	.param .u64 .ptr .global .align 4 SYCL_class_worklist_pr_iter_param_5,
	.param .u64 .ptr .global .align 4 SYCL_class_worklist_pr_iter_param_6,
	.param .u64 .ptr .global .align 4 SYCL_class_worklist_pr_iter_param_7,
	.param .u64 .ptr .global .align 4 SYCL_class_worklist_pr_iter_param_8,
	.param .u64 .ptr .global .align 4 SYCL_class_worklist_pr_iter_param_9,
	.param .u32 SYCL_class_worklist_pr_iter_param_10,
	.param .u64 .ptr .global .align 4 SYCL_class_worklist_pr_iter_param_11,
	.param .u64 .ptr .global .align 4 SYCL_class_worklist_pr_iter_param_12,
	.param .u64 .ptr .global .align 4 SYCL_class_worklist_pr_iter_param_13,
	.param .u64 .ptr .shared .align 4 SYCL_class_worklist_pr_iter_param_14,
	.param .u64 .ptr .global .align 4 SYCL_class_worklist_pr_iter_param_15
)                                       // @SYCL_class_worklist_pr_iter
{
	.reg .pred 	%p<24>;
	.reg .f32 	%f<5>;
	.reg .b32 	%r<75>;
	.reg .f64 	%fd<5>;
	.reg .b64 	%rd<80>;

// %bb.0:
	ld.param.u64 	%rd25, [SYCL_class_worklist_pr_iter_param_2];
	ld.param.u64 	%rd24, [SYCL_class_worklist_pr_iter_param_1];
	ld.param.u64 	%rd23, [SYCL_class_worklist_pr_iter_param_0];
	mov.u32 	%r1, %ctaid.x;
	mov.u32 	%r28, %ntid.x;
	mov.u32 	%r74, %tid.x;
	mad.lo.s32 	%r29, %r28, %r1, %r74;
	cvt.u64.u32 	%rd76, %r29;
	setp.ne.s32 	%p2, %r74, 0;
	@%p2 bra 	LBB1_2;
// %bb.1:
	atom.shared.exch.b32 	%r30, [%rd23], 0;
	add.s64 	%rd37, %rd23, 4;
	atom.shared.exch.b32 	%r31, [%rd37], 0;
	st.shared.u32 	[%rd24], %r1;
LBB1_2:
	ld.param.u64 	%rd33, [SYCL_class_worklist_pr_iter_param_12];
	ld.param.u64 	%rd32, [SYCL_class_worklist_pr_iter_param_11];
	ld.param.u32 	%r27, [SYCL_class_worklist_pr_iter_param_10];
	bar.sync 	0;
	add.s32 	%r32, %r1, 1;
	cvt.u64.u32 	%rd38, %r32;
	mul.lo.s64 	%rd3, %rd38, %rd25;
	setp.le.u64 	%p3, %rd3, %rd76;
	@%p3 bra 	LBB1_22;
// %bb.3:
	ld.param.u64 	%rd34, [SYCL_class_worklist_pr_iter_param_13];
	ld.param.u64 	%rd31, [SYCL_class_worklist_pr_iter_param_9];
	ld.param.u64 	%rd30, [SYCL_class_worklist_pr_iter_param_8];
	ld.param.u64 	%rd29, [SYCL_class_worklist_pr_iter_param_7];
	ld.param.u64 	%rd28, [SYCL_class_worklist_pr_iter_param_6];
	ld.param.u64 	%rd27, [SYCL_class_worklist_pr_iter_param_5];
	ld.param.u64 	%rd26, [SYCL_class_worklist_pr_iter_param_4];
	ld.param.u32 	%r26, [SYCL_class_worklist_pr_iter_param_3];
	cvt.s64.s32 	%rd4, %r26;
	mov.pred 	%p4, 0;
	mov.pred 	%p6, -1;
                                        // implicit-def: %r68
LBB1_4:                                 // =>This Loop Header: Depth=1
                                        //     Child Loop BB1_7 Depth 2
                                        //     Child Loop BB1_17 Depth 2
	setp.ge.u64 	%p5, %rd76, %rd4;
	mov.pred 	%p23, %p4;
	@%p5 bra 	LBB1_14;
// %bb.5:                               //   in Loop: Header=BB1_4 Depth=1
	shl.b64 	%rd39, %rd76, 2;
	add.s64 	%rd40, %rd26, %rd39;
	ld.global.u32 	%r68, [%rd40];
	mul.wide.s32 	%rd41, %r68, 4;
	add.s64 	%rd42, %rd27, %rd41;
	atom.global.and.b32 	%r34, [%rd42], 0;
	cvt.rn.f32.u32 	%f1, %r34;
	mul.rn.f32 	%f2, %f1, 0f35800000;
	add.s64 	%rd43, %rd28, %rd41;
	ld.global.f32 	%f3, [%rd43];
	add.rn.f32 	%f4, %f3, %f2;
	st.global.f32 	[%rd43], %f4;
	add.s64 	%rd6, %rd30, %rd41;
	ld.global.u32 	%r69, [%rd6];
	ld.global.u32 	%r36, [%rd6+4];
	setp.ge.s32 	%p7, %r69, %r36;
	mov.pred 	%p23, %p6;
	@%p7 bra 	LBB1_14;
// %bb.6:                               //   in Loop: Header=BB1_4 Depth=1
	cvt.rn.f64.u32 	%fd1, %r34;
	mul.rn.f64 	%fd2, %fd1, 0d3FEB333333333333;
	add.s64 	%rd44, %rd29, %rd41;
	ld.global.u32 	%r35, [%rd44];
	cvt.rn.f64.s32 	%fd3, %r35;
	div.rn.f64 	%fd4, %fd2, %fd3;
	cvt.rzi.u32.f64 	%r5, %fd4;
	cvt.s64.s32 	%rd7, %r69;
	shl.b64 	%rd45, %rd7, 2;
	add.s64 	%rd77, %rd31, %rd45;
LBB1_7:                                 //   Parent Loop BB1_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ld.global.u32 	%r8, [%rd77];
	mul.wide.s32 	%rd46, %r8, 4;
	add.s64 	%rd47, %rd27, %rd46;
	atom.global.add.u32 	%r37, [%rd47], %r5;
	setp.gt.u32 	%p8, %r37, 1048;
	add.s32 	%r38, %r37, %r5;
	setp.lt.u32 	%p9, %r38, 1049;
	or.pred  	%p10, %p8, %p9;
	@%p10 bra 	LBB1_13;
// %bb.8:                               //   in Loop: Header=BB1_7 Depth=2
	atom.shared.add.u32 	%r9, [%rd23], 1;
	add.s64 	%rd48, %rd23, 4;
	atom.shared.add.u32 	%r10, [%rd48], 0;
	add.s32 	%r39, %r10, 1;
	mul.lo.s32 	%r40, %r39, %r27;
	setp.ge.u32 	%p11, %r9, %r40;
	@%p11 bra 	LBB1_10;
// %bb.9:                               //   in Loop: Header=BB1_7 Depth=2
	mul.wide.u32 	%rd54, %r10, 4;
	add.s64 	%rd55, %rd24, %rd54;
	ld.shared.u32 	%r46, [%rd55];
	rem.u32 	%r47, %r9, %r27;
	mad.lo.s32 	%r48, %r46, %r27, %r47;
	mul.wide.u32 	%rd56, %r48, 4;
	add.s64 	%rd57, %rd32, %rd56;
	st.global.u32 	[%rd57], %r8;
	bra.uni 	LBB1_13;
LBB1_10:                                //   in Loop: Header=BB1_7 Depth=2
	rem.u32 	%r41, %r9, %r27;
	setp.ne.s32 	%p12, %r41, 0;
	@%p12 bra 	LBB1_12;
	bra.uni 	LBB1_11;
LBB1_12:                                //   in Loop: Header=BB1_7 Depth=2
	cvt.s64.s32 	%rd10, %r8;
	add.s32 	%r42, %r9, 1;
	shl.b64 	%rd49, %rd10, 3;
	add.s64 	%rd50, %rd34, %rd49;
	st.global.u32 	[%rd50], %r68;
	st.global.u32 	[%rd50+4], %r42;
	bra.uni 	LBB1_13;
LBB1_11:                                //   in Loop: Header=BB1_7 Depth=2
	atom.global.add.u32 	%r43, [%rd33], 1;
	atom.shared.add.u32 	%r44, [%rd48], 1;
	mul.lo.s32 	%r45, %r43, %r27;
	mul.wide.s32 	%rd52, %r45, 4;
	add.s64 	%rd53, %rd32, %rd52;
	st.global.u32 	[%rd53], %r8;
LBB1_13:                                //   in Loop: Header=BB1_7 Depth=2
	add.s32 	%r69, %r69, 1;
	ld.global.u32 	%r49, [%rd6+4];
	add.s64 	%rd77, %rd77, 4;
	setp.lt.s32 	%p14, %r69, %r49;
	mov.pred 	%p23, %p6;
	@%p14 bra 	LBB1_7;
LBB1_14:                                //   in Loop: Header=BB1_4 Depth=1
	bar.sync 	0;
	@!%p23 bra 	LBB1_21;
	bra.uni 	LBB1_15;
LBB1_15:                                //   in Loop: Header=BB1_4 Depth=1
	mul.wide.s32 	%rd58, %r68, 4;
	add.s64 	%rd12, %rd30, %rd58;
	ld.global.u32 	%r72, [%rd12];
	ld.global.u32 	%r73, [%rd12+4];
	setp.ge.s32 	%p15, %r72, %r73;
	@%p15 bra 	LBB1_21;
// %bb.16:                              //   in Loop: Header=BB1_4 Depth=1
	cvt.s64.s32 	%rd13, %r72;
	shl.b64 	%rd59, %rd13, 2;
	add.s64 	%rd78, %rd31, %rd59;
LBB1_17:                                //   Parent Loop BB1_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	ld.global.u32 	%r17, [%rd78];
	mul.wide.s32 	%rd60, %r17, 8;
	add.s64 	%rd61, %rd34, %rd60;
	ld.global.u32 	%r18, [%rd61+4];
	setp.lt.s32 	%p16, %r18, 1;
	@%p16 bra 	LBB1_20;
// %bb.18:                              //   in Loop: Header=BB1_17 Depth=2
	cvt.s64.s32 	%rd16, %r17;
	shl.b64 	%rd62, %rd16, 3;
	add.s64 	%rd18, %rd34, %rd62;
	ld.global.u32 	%r50, [%rd18];
	setp.ne.s32 	%p17, %r50, %r68;
	@%p17 bra 	LBB1_20;
// %bb.19:                              //   in Loop: Header=BB1_17 Depth=2
	add.s64 	%rd17, %rd61, 4;
	add.s32 	%r51, %r18, -1;
	div.s32 	%r52, %r51, %r27;
	mul.wide.s32 	%rd63, %r52, 4;
	add.s64 	%rd64, %rd24, %rd63;
	ld.shared.u32 	%r53, [%rd64];
	mul.lo.s32 	%r54, %r52, %r27;
	sub.s32 	%r55, %r51, %r54;
	mad.lo.s32 	%r56, %r53, %r27, %r55;
	mul.wide.s32 	%rd65, %r56, 4;
	add.s64 	%rd66, %rd32, %rd65;
	st.global.u32 	[%rd66], %r17;
	mov.u32 	%r57, 0;
	st.global.u32 	[%rd18], %r57;
	st.global.u32 	[%rd17], %r57;
	ld.global.u32 	%r73, [%rd12+4];
LBB1_20:                                //   in Loop: Header=BB1_17 Depth=2
	add.s32 	%r72, %r72, 1;
	add.s64 	%rd78, %rd78, 4;
	setp.lt.s32 	%p18, %r72, %r73;
	@%p18 bra 	LBB1_17;
LBB1_21:                                //   in Loop: Header=BB1_4 Depth=1
	add.s64 	%rd76, %rd76, %rd25;
	setp.lt.u64 	%p19, %rd76, %rd3;
	@%p19 bra 	LBB1_4;
LBB1_22:
	ld.param.u64 	%rd35, [SYCL_class_worklist_pr_iter_param_14];
	setp.eq.s32 	%p20, %r74, 0;
	bar.sync 	0;
	@%p20 bra 	LBB1_23;
	bra.uni 	LBB1_24;
LBB1_23:
	atom.shared.add.u32 	%r58, [%rd23], 0;
	st.shared.u32 	[%rd35], %r58;
	add.s64 	%rd67, %rd23, 4;
	atom.shared.add.u32 	%r59, [%rd67], 0;
	st.shared.u32 	[%rd35+4], %r59;
	add.s64 	%rd68, %rd33, 4;
	atom.global.add.u32 	%r60, [%rd68], %r58;
	st.shared.u32 	[%rd35+8], %r60;
LBB1_24:
	bar.sync 	0;
	ld.shared.u32 	%r23, [%rd35];
	setp.le.s32 	%p21, %r23, %r74;
	@%p21 bra 	LBB1_27;
// %bb.25:
	ld.param.u64 	%rd36, [SYCL_class_worklist_pr_iter_param_15];
	cvt.u64.u32 	%rd79, %r74;
	ld.shared.u32 	%r22, [%rd35+8];
LBB1_26:                                // =>This Inner Loop Header: Depth=1
	div.s32 	%r61, %r74, %r27;
	mul.wide.s32 	%rd69, %r61, 4;
	add.s64 	%rd70, %rd24, %rd69;
	ld.shared.u32 	%r62, [%rd70];
	mul.lo.s32 	%r63, %r61, %r27;
	sub.s32 	%r64, %r74, %r63;
	mad.lo.s32 	%r65, %r62, %r27, %r64;
	mul.wide.s32 	%rd71, %r65, 4;
	add.s64 	%rd72, %rd32, %rd71;
	ld.global.u32 	%r66, [%rd72];
	add.s32 	%r67, %r74, %r22;
	mul.wide.s32 	%rd73, %r67, 4;
	add.s64 	%rd74, %rd36, %rd73;
	st.global.u32 	[%rd74], %r66;
	cvt.s64.s32 	%rd75, %rd79;
	add.s64 	%rd79, %rd75, %rd25;
	cvt.u32.u64 	%r74, %rd79;
	setp.gt.s32 	%p22, %r23, %r74;
	@%p22 bra 	LBB1_26;
LBB1_27:
	ret;
                                        // -- End function
}
	// .globl	SYCL_class_clear_dup_mask // -- Begin function SYCL_class_clear_dup_mask
.entry SYCL_class_clear_dup_mask(
	.param .u64 .ptr .global .align 4 SYCL_class_clear_dup_mask_param_0,
	.param .u64 .ptr .global .align 4 SYCL_class_clear_dup_mask_param_1
)                                       // @SYCL_class_clear_dup_mask
{
	.reg .b32 	%r<7>;
	.reg .b64 	%rd<7>;

// %bb.0:
	ld.param.u64 	%rd1, [SYCL_class_clear_dup_mask_param_0];
	ld.param.u64 	%rd2, [SYCL_class_clear_dup_mask_param_1];
	mov.u32 	%r1, %ctaid.x;
	mov.u32 	%r2, %ntid.x;
	mov.u32 	%r3, %tid.x;
	mad.lo.s32 	%r4, %r2, %r1, %r3;
	mul.wide.u32 	%rd3, %r4, 4;
	add.s64 	%rd4, %rd2, %rd3;
	ld.global.u32 	%r5, [%rd4];
	mul.wide.s32 	%rd5, %r5, 4;
	add.s64 	%rd6, %rd1, %rd5;
	mov.u32 	%r6, 0;
	st.global.u32 	[%rd6], %r6;
	ret;
                                        // -- End function
}

